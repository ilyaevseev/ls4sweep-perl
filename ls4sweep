#!/usr/bin/perl
#
#  ls4sweep -- tool for removing old backups.
#
#  ls4sweep is a tool intended for use as helper for removing old backups.
#  A sweeping policy consists of a set of records that contains
#  the number of intervals or a periods in days to retain.
#  It checks creation or modification time of given files
#  and displays names of those when they don't match the policy.
#  The output can then be passed to rm.
#
#  Written by ilya.evseev@gmail.com
#  Distributed as public domain.
#  Site: https://code.google.com/p/ls4sweep-perl/
#

use strict;
use warnings;

use Time::Local;

sub usage {
	print STDERR "ERROR: @_\n" if @_;
	die "Usage: $0 [options] policy files...\n"
	   ."Policy: periods_count1:period_duration1,p2:d2,...\n"
	   ."Options: -0, --ctime, --verbose\n"
	   ."Example: ls4sweep 7:1,3:7,11:30,100:360 *.zip\n";
}

my $verbose;
my $use_ctime;
my $linesep = "\n";

while (@ARGV and $ARGV[0] =~ /^-/) {
	my $s = shift @ARGV;
	if ($s eq '-0') {
		$linesep = "\0";
	} elsif ($s eq '--verbose') {
		$verbose = 1;
	} elsif ($s eq '--ctime') {
		$use_ctime = 1;
	}
}

usage unless @ARGV;
usage "Missing files" if @ARGV < 2;

my $now = time;
my @localnow = localtime($now);    # See http://stackoverflow.com/a/2143609/2743554
my $tzoffset = timegm(@localnow) - timelocal(@localnow);

sub secs2days($) { int( ($_[0] + $tzoffset) / 86400 ) }
my $nowday = secs2days($now);

my $polstr = shift @ARGV;
my @policy;  # { DURATION=>value, FILES=> { name=>mtime, ... } }
my @oldest;

foreach (split /[,;] */, $polstr) {
	die "Wrong policy token: $_\n" unless /^(\d+)[:=]\s*(\d+)\s*$/;
	my ($periods_count, $period_duration) = ($1, $2);
	push @policy, { DURATION => $period_duration, FILES => {} }
		foreach 1..$periods_count;
}

# Attach files to periods..
foreach my $filename (@ARGV) {
	next unless -e $filename;  # ..protect against non-matching wildcards passed from shell to me.
	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($filename);
	my $ftime = secs2days($use_ctime ? $ctime : $mtime);
	my $delta = $nowday - $ftime;
	foreach my $token (@policy) {
		$delta -= $token->{DURATION};
		next if $delta >= 0;
		my $files = $token->{FILES};
		$files->{$filename} = $ftime;
		last;
	}
	push @oldest, $filename if $delta >= 0;
}

# For each period, print all filenames except oldiest..
foreach my $token (@policy) {
	my $files = $token->{FILES};
	my @sorted = sort { $files->{$a} <=> $files->{$b} } keys %$files;
	my $oldest = shift @sorted;  # ..skip oldest file
	printf STDERR "%d : keep %s, remove %s\n",
		$token->{DURATION}, $oldest || 'none', @sorted ? "@sorted" : 'none'
		if $verbose;
	printf "%s%s", $_, $linesep foreach @sorted;
}

print STDERR "Oldest files:\n" if $verbose;
printf "%s%s", $_, $linesep foreach @oldest;

## EOF ##
